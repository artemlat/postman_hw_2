{
	"info": {
		"_postman_id": "6288fadb-4212-4e87-8db2-7b9d55e382b9",
		"name": "HW_2_gr_35",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16645036"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});  // 2. Статус код 200\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"}); // 3. Проверить, что в body приходит правильный string."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var parsed_response = pm.response.json(); // 3. Спарсить response body в json.\r",
							"var response_name = parsed_response.name // Создал переменную с name из response\r",
							"var response_age = +parsed_response.age // Создал переменную с age из response\r",
							"var response_salary = +parsed_response.salary // Создал переменную с salary из response\r",
							"var parsed_request = request.data // 7. Спарсить request.\r",
							"var request_name = parsed_request.name // Создал переменую с name из request \r",
							"var request_age = +parsed_request.age // Создал переменую с age из request\r",
							"var request_salary = +parsed_request.salary // Создал переменую с salary из request\r",
							"var response_u_salary_1_5_year = parsed_response.family.u_salary_1_5_year // Создал переменную с u_salary_1_5_year из response\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 2. Статус код 200\r",
							"\r",
							"pm.test(\"Name checking\", function () {\r",
							"    pm.expect(response_name).to.eql(\"Artiom\");\r",
							"}); // 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"Age checking\", function () {\r",
							"    pm.expect(response_age).to.eql(25);\r",
							"}); // 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Salary checking\", function () {\r",
							"    pm.expect(response_salary).to.eql(500);\r",
							"}); // 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"request_name matches response_name\", function () {\r",
							"    pm.expect(response_name).to.eql(request_name);\r",
							"}); // 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"request_age matches response_age\", function () {\r",
							"    pm.expect(response_age).to.eql(request_age);\r",
							"}); // 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"request_salary matches response_salary\", function () {\r",
							"    pm.expect(response_salary).to.eql(request_salary);\r",
							"}); // 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"console.log(parsed_response.family) // 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"pm.test(\"parsed_response.u_salary_1_5_year matches parsed_request.salary*4\", function () {\r",
							"    pm.expect(response_u_salary_1_5_year).to.eql(request_salary*4);\r",
							"}); // 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Artiom",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var parsed_response = pm.response.json(); // 3. Спарсить response body в json.\r",
							"var parsed_request = pm.request.url.query.toObject() // 4. Спарсить request.\r",
							"var response_name = parsed_response.name // Создал переменную с name из response\r",
							"var response_age = parsed_response.age // Создал переменную с age из response\r",
							"var response_salary = parsed_response.salary // Создал переменную с salary из response\r",
							"var request_name = parsed_request.name // Создал переменную с name из request\r",
							"var request_age = parsed_request.age // Создал переменную с age из request\r",
							"var request_salary = +parsed_request.salary // Создал переменную с salary из request\r",
							"var response_dog = parsed_response.family.pets.dog // Создал переменную с dog из response\r",
							"var response_dog_name = response_dog.name // Создал переменную с dog_name из response\r",
							"var response_dog_age = response_dog.age // Создал переменную с dog_age из response\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"response name matches request name\", function () {\r",
							"    pm.expect(response_name).to.eql(request_name);\r",
							"}); // 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"response age matches request age\", function () {\r",
							"    pm.expect(response_age).to.eql(request_age);\r",
							"}); // 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"response salary matches request salary\", function () {\r",
							"    pm.expect(response_salary).to.eql(request_salary);\r",
							"}); // 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"console.log(parsed_response.family) // 8. Вывести в консоль параметр family из response.)\r",
							"\r",
							"pm.test(\"dog has name\", () => {\r",
							"    pm.expect(response_dog).includes.key(\"name\");\r",
							"}) // 9. Проверить, что у параметра dog есть параметр name.\r",
							"\r",
							"pm.test(\"dog has age\", () => {\r",
							"    pm.expect(response_dog).includes.key(\"age\");\r",
							"}) // 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"dog`s name is Luky\", () => {\r",
							"    pm.expect(response_dog_name).to.have.eql(\"Luky\");\r",
							"}) // 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"dog`s age is 4\", () => {\r",
							"    pm.expect(response_dog_age).to.have.eql(4);\r",
							"}) // 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Artiom&age=25&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Artiom"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var parsed_response = pm.response.json(); // 3. Спарсить response body в json.\r",
							"var parsed_request = pm.request.url.query.toObject() // 4. Спарсить request.\r",
							"var response_name = parsed_response.name // Создал переменную с name из response\r",
							"var request_name = parsed_request.name // Создал переменную с name из request\r",
							"var response_age = parsed_response.age // Создал переменную с age из response\r",
							"var request_age = +parsed_request.age // Создал переменную с age из request\r",
							"var response_salary = parsed_response.salary // Создал переменную с salary из response\r",
							"var request_salary = +parsed_request.salary // Создал переменную с salary из request\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 2. Статус код 200\r",
							"\r",
							"pm.test(\"response_name matches request_name\", function () {\r",
							"    pm.expect(response_name).to.eql(request_name);\r",
							"}); // 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"response_age matches request_age\", function () {\r",
							"    pm.expect(response_age).to.eql(request_age);\r",
							"}); // 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"console.log(request_salary) // 7. Вывести в консоль параметр salary из request.\r",
							"console.log(response_salary) // 8. Вывести в консоль параметр salary из response.\r",
							"console.log(response_salary[0]) // 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(response_salary[1]) // 10. Вывести в консоль 1-й элемент параметра salary из response.\r",
							"console.log(response_salary[2]) // 11. Вывести в консоль 2-й элемент параметра salary из response.\r",
							"\r",
							"pm.test(\"response_salary[0] mathes request_salary\", function () {\r",
							"    pm.expect(response_salary[0]).to.eql(request_salary);\r",
							"}); // 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"response_salary[1] mathes request_salary*2\", function () {\r",
							"    pm.expect(+response_salary[1]).to.eql(request_salary*2);\r",
							"}); // 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"response_salary[2] mathes request_salary*3\", function () {\r",
							"    pm.expect(+response_salary[2]).to.eql(request_salary*3);\r",
							"}); // 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.environment.set(\"name\", \"Artiom\"); // 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"age\", 25); // 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"salary\", 500); // 20. Передать в окружение переменную salary\r",
							"\r",
							"for (let i = 0; i < response_salary.length; i++) {\r",
							"    console.log('Вывод через цикл', i, 'элемента списка из параметра salary:', response_salary[i])\r",
							"} // 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Artiom&age=25&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Artiom"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var parsed_response = pm.response.json(); // 6. Спарсить response body в json.\r",
							"var parsed_request = request.data; // 7. Спарсить request.\r",
							"var request_salary = +parsed_request.salary // Создал переменную с salary из request.\r",
							"var response_start_qa_salary = parsed_response.start_qa_salary // Создал переменную с start_qa_salary из response.\r",
							"var response_qa_salary_after_6_months = parsed_response.qa_salary_after_6_months // Создал переменную с qa_salary_after_6_months из response.\r",
							"var response_qa_salary_after_12_months = parsed_response.qa_salary_after_12_months // 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"var response_qa_salary_after_1_5_year = parsed_response['qa_salary_after_1.5_year'] // Создал переменную с qa_salary_after_1.5_year из response\r",
							"var response_qa_salary_after_3_5_year = parsed_response['qa_salary_after_3.5_years'] // Создал переменную с qa_salary_after_3.5_years из response\r",
							"var response_u_name = parsed_response.person.u_name // Создал переменную с u_name из response\r",
							"var response_u_age = parsed_response.person.u_age // Создал переменную с u_age из response\r",
							"var request_age = +parsed_request.age // Создале переменную с age из request\r",
							"var response_u_salary_5_years = parsed_response.person.u_salary_5_years // Создал переменную с response_u_salary_5_years из response\r",
							"var response_person = parsed_response.person // Создал переменную с person из response\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 5. Статус код 200\r",
							"\r",
							"pm.test(\"parsed_response includes start_qa_salary\", function () {\r",
							"    pm.expect(parsed_response).to.have.property('start_qa_salary');\r",
							"}); // 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"parsed_response includes qa_salary_after_6_months\", function () {\r",
							"    pm.expect(parsed_response).to.have.property('qa_salary_after_6_months');\r",
							"}); // 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"parsed_response includes qa_salary_after_12_months\", function () {\r",
							"    pm.expect(parsed_response).to.have.property('qa_salary_after_12_months');\r",
							"}); // 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"parsed_response includes qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(parsed_response).to.have.property('qa_salary_after_1.5_year');\r",
							"}); // 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"parsed_response includes qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(parsed_response).to.have.property('qa_salary_after_3.5_years');\r",
							"}); // 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"parsed_response includes person\", function () {\r",
							"    pm.expect(parsed_response).to.have.property('person');\r",
							"}); // 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"response_start_qa_salary mathes request_salary\", function () {\r",
							"    pm.expect(response_start_qa_salary).to.eql(request_salary);\r",
							"}); // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"response_qa_salary_after_6_months matches request_salary*2\", function () {\r",
							"    pm.expect(response_qa_salary_after_6_months).to.eql(request_salary*2);\r",
							"}); // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"response_qa_salary_after_12_months matches request_salary*2.7\", function () {\r",
							"    pm.expect(response_qa_salary_after_12_months).to.eql(request_salary*2.7);\r",
							"}); // 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"response_qa_salary_after_1_5_year matches request_salary*3.3\", function () {\r",
							"    pm.expect(response_qa_salary_after_1_5_year).to.eql(request_salary*3.3);\r",
							"}); // 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years matches request_salary*3.8\", function () {\r",
							"    pm.expect(response_qa_salary_after_3_5_year).to.eql(request_salary*3.8);\r",
							"}); // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"response_u_name[1] matches request_salary\", function () {\r",
							"    pm.expect(response_u_name[1]).to.eql(request_salary);\r",
							"}); // 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"response_u_age matches request_age\", function () {\r",
							"    pm.expect(response_u_age).to.eql(request_age);\r",
							"}); // 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"response_u_salary_5_years matches request_salary*4.2\", function () {\r",
							"    pm.expect(response_u_salary_5_years).to.eql(request_salary*4.2);\r",
							"}); // 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"// for (let i = 0; i < response_person.lenght; i++) {\r",
							"\r",
							"// }\r",
							"for (let item in response_person){\r",
							"    if (typeof response_person[item] == \"object\"){\r",
							"        for (let l of response_person[item]){\r",
							"            console.log(l)\r",
							"        }\r",
							"    }\r",
							"} // 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5008/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5008",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}